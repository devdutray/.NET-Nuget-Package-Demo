name: Build and Publish NuGet Package

on:
  push:
    branches: [main]
  
jobs:
  build:
    name: Build the application
    runs-on: ubuntu-latest
    outputs:
      Version: ${{ steps.gitversion.outputs.SemVer }}
      CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}
      
    steps:
      # 1. Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required for GitVersion to determine the full commit history

      # 2. Install and run GitVersion
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v1
        with:
          versionSpec: '5.x'

      - name: Determine Version
        uses: gittools/actions/gitversion/execute@v1
        id: gitversion # Outputs version information

      - name: Display GitVersion Outputs
        run: |
          echo "Version: ${{ steps.gitversion.outputs.SemVer }}"
          echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}"

      # 3. Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      # 4: Restore project dependencies
      - name: Restore dependencies
        working-directory: ./Dotnet-Package
        run: dotnet restore 

      # 5. Build
      - name: Build Project
        working-directory: ./Dotnet-Package
        run: dotnet build --configuration Release --no-restore
        
      # 6. Pack the .csproj file
      - name: Pack NuGet Package
        run: |
          PROJECT_FILE=$(find . -name "*.csproj" | head -n 1) # Finds the first .csproj file
          echo "Found Project File: $PROJECT_FILE"
          dotnet pack "./Dotnet-Package/Dotnet-Package.csproj" \
            -p:Version='${{ steps.gitversion.outputs.SemVer }}-alpha' \
            -c Release \
            --output ./nupkg

      # 7. Upload NuGet package as an artifact
      - name: Upload NuGet Package
        uses: actions/upload-artifact@v4
        with:
          name: nugetPackage
          path: ./nupkg/*.nupkg

  release:
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.CommitsSinceVersionSource > 0 # Only run if there are changes since the last version

    steps:
      # 1. Download the NuGet package
      - name: Download NuGet Package
        uses: actions/download-artifact@v4
        with:
          name: nugetPackage
          path: ./nupkg

      # 2. Add NuGet source for GitHub Registry
      - name: Configure GitHub NuGet Source
        run: dotnet nuget add source "https://nuget.pkg.github.com/devdutray/index.json" --name "git" --username "${{ github.actor }}" --password "${{ secrets.GITHUB_TOKEN }}" --store-password-in-clear-text

      # 3. Push to GitHub Packages
      - name: Push Package to GitHub Packages
        run: |
          dotnet nuget push "./nupkg/*.nupkg" \
             --api-key ${{ secrets.NUGET_PACKAGE_TOKEN }} \
             --source https://nuget.pkg.github.com/devdutray/index.json \
             --skip-duplicate

      # 4. Create a GitHub Release
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.build.outputs.Version }}
          name: Release ${{ needs.build.outputs.Version }}
          artifacts: "./nupkg/*.nupkg"
          token: ${{ secrets.NUGET_PACKAGE_TOKEN }}
